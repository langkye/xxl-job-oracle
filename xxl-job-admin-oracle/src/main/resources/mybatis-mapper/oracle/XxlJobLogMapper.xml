<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xxl.job.admin.dao.XxlJobLogDao">

	<resultMap id="XxlJobLog" type="com.xxl.job.admin.core.model.XxlJobLog" >
		<result column="id" property="id" />

		<result column="job_group" property="jobGroup" />
		<result column="job_id" property="jobId" />

		<result column="executor_address" property="executorAddress" />
		<result column="executor_handler" property="executorHandler" />
	    <result column="executor_param" property="executorParam" />
		<result column="executor_sharding_param" property="executorShardingParam" />
		<result column="executor_fail_retry_count" property="executorFailRetryCount" />

	    <result column="trigger_time" property="triggerTime" />
	    <result column="trigger_code" property="triggerCode" />
	    <result column="trigger_msg" property="triggerMsg" />

	    <result column="handle_time" property="handleTime" />
	    <result column="handle_code" property="handleCode" />
	    <result column="handle_msg" property="handleMsg" />

		<result column="alarm_status" property="alarmStatus" />
	</resultMap>

	<sql id="Base_Column_List">
		t.id,
		t.job_group,
		t.job_id,
		t.executor_address,
		t.executor_handler,
		t.executor_param,
		t.executor_sharding_param,
		t.executor_fail_retry_count,
		t.trigger_time,
		t.trigger_code,
		t.trigger_msg,
		t.handle_time,
		t.handle_code,
		t.handle_msg,
		t.alarm_status
	</sql>

	<select id="pageList" resultMap="XxlJobLog">
		SELECT * FROM (SELECT TMP.*, ROWNUM ROW_ID FROM (SELECT
		t.id,
		t.job_group,
		t.job_id,
		t.executor_address,
		t.executor_handler,
		t.executor_param,
		t.executor_sharding_param,
		t.executor_fail_retry_count,
		t.trigger_time,
		(case when t.handle_time is null then null else ROUND(TO_NUMBER(t.handle_time -t.trigger_time  ) * 24 * 60 * 60) end) longExeTime,
		t.trigger_code,
		t.trigger_msg,
		t.handle_time,
		t.handle_code,
		t.handle_msg,
		t.alarm_status,
		j.job_desc
		FROM XXL_JOB_LOG  t join XXL_JOB_INFO  j on t.job_id = j.id
		<trim prefix="WHERE" prefixOverrides="AND | OR" >
			<if test="jobId==0 and jobGroup gt 0">
				AND t.job_group = #{jobGroup}
			</if>
			<if test="jobId gt 0">
				AND t.job_id = #{jobId}
			</if>
			<if test="triggerTimeStart != null">
				AND t.trigger_time <![CDATA[ >= ]]> #{triggerTimeStart,jdbcType=TIMESTAMP}
			</if>
			<if test="triggerTimeEnd != null">
				AND t.trigger_time <![CDATA[ <= ]]> #{triggerTimeEnd,jdbcType=TIMESTAMP}
			</if>
			<if test="logStatus == 1" >
				AND t.handle_code = 200
			</if>
			<if test="logStatus == 2" >
				AND (
				t.trigger_code NOT IN (0, 200) OR
				t.handle_code NOT IN (0, 200)
				)
			</if>
			<if test="logStatus == 3" >
				AND t.trigger_code = 200
				AND t.handle_code = 0
			</if>
		</trim>
		ORDER BY t.trigger_time DESC) TMP
		WHERE ROWNUM <![CDATA[ <= ]]> #{pagesize})
		WHERE ROW_ID > #{offset}
	</select>

	<select id="pageListCount" resultType="int">
		SELECT count(1)
		FROM XXL_JOB_LOG  t
		<trim prefix="WHERE" prefixOverrides="AND | OR" >
			<if test="jobId==0 and jobGroup gt 0">
				AND t.job_group = #{jobGroup}
			</if>
			<if test="jobId gt 0">
				AND t.job_id = #{jobId}
			</if>
			<if test="triggerTimeStart != null">
				AND t.trigger_time <![CDATA[ >= ]]> #{triggerTimeStart,jdbcType=TIMESTAMP}
			</if>
			<if test="triggerTimeEnd != null">
				AND t.trigger_time <![CDATA[ <= ]]> #{triggerTimeEnd,jdbcType=TIMESTAMP}
			</if>
			<if test="logStatus == 1" >
				AND t.handle_code = 200
			</if>
			<if test="logStatus == 2" >
				AND (
				t.trigger_code NOT IN (0, 200) OR
				t.handle_code NOT IN (0, 200)
				)
			</if>
			<if test="logStatus == 3" >
				AND t.trigger_code = 200
				AND t.handle_code = 0
			</if>
		</trim>
	</select>

	<select id="load" parameterType="java.lang.Long" resultMap="XxlJobLog">
		SELECT <include refid="Base_Column_List" />
		FROM XXL_JOB_LOG  t
		WHERE t.id = #{id,jdbcType=NUMERIC}
	</select>


	<insert id="save" parameterType="com.xxl.job.admin.core.model.XxlJobLog" useGeneratedKeys="true"  keyColumn="id"  keyProperty="id" >
		INSERT INTO XXL_JOB_LOG (
		id,
		job_group,
		job_id,
		trigger_time,
		trigger_code,
		handle_code
		) VALUES (
		XXL_JOB_LOG_SEQ.nextval,
		#{jobGroup,jdbcType=NUMERIC},
		#{jobId,jdbcType=NUMERIC},
		#{triggerTime,jdbcType=TIMESTAMP},
		#{triggerCode,jdbcType=NUMERIC},
		#{handleCode,jdbcType=NUMERIC}
		)
		<!--<selectKey resultType="java.lang.Integer" order="AFTER" keyProperty="id">
			SELECT LAST_INSERT_ID()
		</selectKey>-->
	</insert>

	<update id="updateTriggerInfo" >
		UPDATE XXL_JOB_LOG
		SET
		trigger_time= #{triggerTime,jdbcType=TIMESTAMP},
		trigger_code= #{triggerCode,jdbcType=NUMERIC},
		trigger_msg= #{triggerMsg,jdbcType=CLOB},
		executor_address= #{executorAddress,jdbcType=VARCHAR},
		executor_handler=#{executorHandler,jdbcType=VARCHAR},
		executor_param= #{executorParam,jdbcType=VARCHAR},
		executor_sharding_param= #{executorShardingParam,jdbcType=VARCHAR},
		executor_fail_retry_count= #{executorFailRetryCount,jdbcType=NUMERIC}
		WHERE id= #{id,jdbcType=NUMERIC}
	</update>

	<update id="updateHandleInfo">
		UPDATE XXL_JOB_LOG
		SET
		handle_time= #{handleTime,jdbcType=TIMESTAMP},
		handle_code= #{handleCode,jdbcType=NUMERIC},
		handle_msg= #{handleMsg,jdbcType=CLOB}
		WHERE id= #{id,jdbcType=NUMERIC}
	</update>

	<delete id="delete" >
		delete from XXL_JOB_LOG
		WHERE job_id = #{jobId,jdbcType=NUMERIC}
	</delete>

	<!--<select id="triggerCountByDay" resultType="java.util.Map" >
        SELECT
            DATE_FORMAT(trigger_time,'%Y-%m-%d') triggerDay,
            COUNT(handle_code) triggerDayCount,
            SUM(CASE WHEN (trigger_code in (0, 200) and handle_code = 0) then 1 else 0 end) as triggerDayCountRunning,
            SUM(CASE WHEN handle_code = 200 then 1 else 0 end) as triggerDayCountSuc
        FROM XXL_JOB_LOG
        WHERE trigger_time BETWEEN #{from} and #{to}
        GROUP BY triggerDay
        ORDER BY triggerDay
    </select>-->

	<select id="findLogReport" resultType="java.util.Map" >
		SELECT
		COUNT(handle_code) triggerDayCount,
		SUM(CASE WHEN (trigger_code in (0, 200) and handle_code = 0) then 1 else 0 end) as triggerDayCountRunning,
		SUM(CASE WHEN handle_code = 200 then 1 else 0 end) as triggerDayCountSuc
		FROM XXL_JOB_LOG
		WHERE trigger_time BETWEEN #{from,jdbcType=TIMESTAMP} and #{to,jdbcType=TIMESTAMP}
	</select>

	<select id="findClearLogIds" resultType="long" >
		SELECT * FROM (SELECT TMP.*, ROWNUM ROW_ID FROM (SELECT id FROM XXL_JOB_LOG
		<trim prefix="WHERE" prefixOverrides="AND | OR" >
			<if test="jobGroup gt 0">
				AND job_group = #{jobGroup,jdbcType=NUMERIC}
			</if>
			<if test="jobId gt 0">
				AND job_id = #{jobId,jdbcType=NUMERIC}
			</if>
			<if test="clearBeforeTime != null">
				AND trigger_time <![CDATA[ <= ]]> #{clearBeforeTime,jdbcType=TIMESTAMP}
			</if>
			<if test="clearBeforeNum gt 0">
				AND id NOT in(
				SELECT id FROM(
				SELECT * FROM (SELECT TMP_T.*, ROWNUM ROW_ID FROM(
				SELECT id FROM XXL_JOB_LOG t
				<trim prefix="WHERE" prefixOverrides="AND | OR" >
					<if test="jobGroup gt 0">
						AND t.job_group = #{jobGroup,jdbcType=NUMERIC}
					</if>
					<if test="jobId gt 0">
						AND t.job_id = #{jobId,jdbcType=NUMERIC}
					</if>
				</trim>
				ORDER BY t.trigger_time desc) TMP_T
				WHERE ROWNUM <![CDATA[ <= ]]> #{clearBeforeNum,jdbcType=NUMERIC})
				WHERE ROW_ID > 0
				) t1
				)
			</if>
		</trim>
		order by id asc) TMP
		WHERE ROWNUM <![CDATA[ <= ]]> #{pagesize,jdbcType=NUMERIC})
		WHERE ROW_ID > 0
	</select>

	<delete id="clearLog" >
		delete from XXL_JOB_LOG
		WHERE id in
		<foreach collection="logIds" item="item" open="(" close=")" separator="," >
			#{item}
		</foreach>
	</delete>

	<select id="findFailJobLogIds" resultType="long" >
		SELECT * FROM (SELECT TMP.*, ROWNUM ROW_ID FROM (SELECT id FROM XXL_JOB_LOG
		WHERE
		((trigger_code not in (0, 200) and handle_code != 0)
		OR
		(handle_code != 200))
		AND alarm_status = 0
		ORDER BY id ASC) TMP
		WHERE ROWNUM <![CDATA[ <= ]]> #{pagesize,jdbcType=NUMERIC})
		WHERE ROW_ID > 0
	</select>

	<update id="updateAlarmStatus" >
		UPDATE XXL_JOB_LOG
		SET
		alarm_status = #{newAlarmStatus}
		WHERE id= #{logId,jdbcType=NUMERIC} AND alarm_status = #{oldAlarmStatus}
	</update>

	<select id="findLostJobIds" resultType="long" >
		SELECT
		t.id
		FROM
		XXL_JOB_LOG t
		LEFT JOIN XXL_JOB_REGISTRY t2 ON t.executor_address = t2.registry_value
		WHERE
		t.trigger_code = 200
		AND t.handle_code = 0
		AND t.trigger_time <![CDATA[ <= ]]> #{losedTime,jdbcType=TIMESTAMP}
		AND t2.id IS NULL
	</select>
	<!--
	SELECT t.id
	FROM xxl_job_log AS t
	WHERE t.trigger_code = 200
		and t.handle_code = 0
		and t.trigger_time <![CDATA[ <= ]]> #{losedTime}
		and t.executor_address not in (
			SELECT t2.registry_value
			FROM xxl_job_registry AS t2
		)
	-->

</mapper>